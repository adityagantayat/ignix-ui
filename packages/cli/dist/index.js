#!/usr/bin/env node
import { createRequire } from "module"; const require = createRequire(import.meta.url);
import{Command as W}from"commander";import J from"prompts";import z from"ora";import H from"chalk";import D from"axios";import w from"path";import l from"fs-extra";var S={BASE_URL:"https://raw.githubusercontent.com/lakinmindfire/animate-ui/feature/tailwind-merge-config/packages/registry",PATHS:{REGISTRY:"/registry.json",COMPONENTS:"/components"}},p={COMPONENTS_DIR:"src/components/ui",UTILS_DIR:"src/utils",CONFIG_FILES:{TAILWIND:"tailwind.config.js",PACKAGE_JSON:"package.json"}};var a=class extends Error{constructor(t,n,r){super(t);this.code=n;this.suggestions=r;this.name="CLIError"}},T=class extends a{constructor(e){super(`Component "${e}" not found in registry`,"COMPONENT_NOT_FOUND",["Check available components with: npx animation-ui list"])}},v=class extends a{constructor(e){super(`Registry error: ${e}`,"REGISTRY_ERROR",["Try again later or report this issue"])}};var P=class o{constructor(){this.registry=null}static getInstance(){return o.instance||(o.instance=new o),o.instance}async loadRegistry(){var e;if(this.registry)return this.registry;try{let t=await D.get(`${S.BASE_URL}${S.PATHS.REGISTRY}`);if(!((e=t.data)!=null&&e.components))throw new v("Invalid registry format");return this.registry=t.data,this.registry}catch(t){throw D.isAxiosError(t)?new v(`Failed to fetch registry: ${t.message}`):t}}async getComponent(e){let t=await this.loadRegistry(),n=e.toLowerCase(),r=t.components[n];if(!r)throw new T(e);let i=await Promise.all(Object.entries(r.files).map(async([s,d])=>{let C=`${S.BASE_URL}/${d.path}`,{data:E}=await D.get(C);return[s,{...d,content:E}]}));return{...r,files:Object.fromEntries(i)}}async getAvailableComponents(){let e=await this.loadRegistry();return Object.values(e.components)}async installComponent(e){let t=[],n=w.join(process.cwd(),p.COMPONENTS_DIR);try{this.validateComponent(e);let r=w.join(n,e.name.toLowerCase());await l.ensureDir(r);for(let[i,s]of Object.entries(e.files)){if(!s.content)throw new a(`Missing content for file: ${s.path}`,"INVALID_COMPONENT",["Try updating the CLI to the latest version"]);if(s.type==="tailwind-config"){await this.mergeTailwindConfig(s.content);continue}let d=w.join(r,w.basename(s.path));await l.writeFile(d,s.content),t.push(d)}await this.updateIndexFile(n,e.name)}catch(r){throw await this.rollbackInstallation(t),r}}validateComponent(e){if(!e.name||!e.files)throw new a("Invalid component structure","INVALID_COMPONENT",["Ensure you have the latest CLI version"])}async rollbackInstallation(e){for(let t of e)try{await l.remove(t)}catch(n){console.error(`Failed to rollback file ${t}:`,n)}}async mergeTailwindConfig(e){var n,r,i,s,d,C,E,b,L;let t=w.resolve(p.CONFIG_FILES.TAILWIND);try{if(!await l.pathExists(t))throw new a("Tailwind config file not found","CONFIG_NOT_FOUND",["Run `animation-ui init` first to create the config file"]);let f=await l.readFile(t,"utf-8");if(!this.isValidTailwindConfig(f))throw new a("Invalid tailwind config format","INVALID_CONFIG",["Ensure your tailwind.config.js follows the correct format"]);let x=this.parseTailwindConfig(f),A=this.parseTailwindConfig(e),j={...x,theme:{extend:{...(n=x.theme)==null?void 0:n.extend,keyframes:{...(i=(r=x.theme)==null?void 0:r.extend)==null?void 0:i.keyframes,...(d=(s=A.theme)==null?void 0:s.extend)==null?void 0:d.keyframes},animation:{...(E=(C=x.theme)==null?void 0:C.extend)==null?void 0:E.animation,...(L=(b=A.theme)==null?void 0:b.extend)==null?void 0:L.animation}}}},U=`module.exports = ${this.objectToString(j)}`;await l.writeFile(t,U)}catch(f){throw f instanceof a?f:new a(`Failed to merge tailwind config: ${f instanceof Error?f.message:"Unknown error"}`,"MERGE_FAILED")}}isValidTailwindConfig(e){try{let t=e.replace(/module\.exports\s*=\s*/,"").replace(/;$/,"").trim();return Function(`return ${t}`)(),!0}catch{return!1}}objectToString(e,t=2){if(Array.isArray(e))return`[${e.map(r=>typeof r=="string"?`'${r}'`:this.objectToString(r)).join(", ")}]`;if(typeof e=="object"&&e!==null){let n=Object.entries(e).map(([r,i])=>{let s=typeof i=="string"?`'${i}'`:this.objectToString(i);return`${r}: ${s}`}).join(`,
`+" ".repeat(t));return`{
${" ".repeat(t)}${n}
${" ".repeat(Math.max(0,t-2))}}`}return String(e)}parseTailwindConfig(e){try{let t=e.replace(/module\.exports\s*=\s*/,"").replace(/;$/,"").trim();return Function(`return ${t}`)()}catch(t){throw new Error(`Invalid tailwind config format: ${t instanceof Error?t.message:"Unknown error"}`)}}async updateIndexFile(e,t){let n=w.join(e,"index.ts"),r=`export * from './${t.toLowerCase()}';
`;(await l.pathExists(n)?await l.readFile(n,"utf-8"):"").includes(r)||await l.appendFile(n,r)}};import{execSync as G}from"child_process";import{detect as M}from"@antfu/ni";async function $(o){let e=await M({programmatic:!0,cwd:o});return e==="yarn@berry"?"yarn":e==="pnpm@6"?"pnpm":e==="bun"?"bun":e??"npm"}var h=class o{static getInstance(){return o.instance||(o.instance=new o),o.instance}async installDependencies(e){if(!e.length)return;let t=3,n=null;for(let r=1;r<=t;r++)try{let i=await $(process.cwd()),s=this.getInstallCommand(i,e);G(s,{stdio:"inherit"});return}catch(i){if(n=i instanceof Error?i:new Error("Unknown error"),r===t)throw new a(`Failed to install dependencies: ${n.message}`,"INSTALL_FAILED",["Check your internet connection","Ensure you have write permissions","Try installing manually with npm/yarn/pnpm"]);await new Promise(s=>setTimeout(s,Math.pow(2,r)*1e3))}}getInstallCommand(e,t){let n=t.join(" ");switch(e){case"yarn":return`yarn add ${n}`;case"pnpm":return`pnpm add ${n}`;case"bun":return`bun add ${n}`;default:return`npm install ${n}`}}};import u from"chalk";var y=class{info(e){console.log(u.blue(e))}success(e){console.log(u.green(e))}error(e,t){console.error(u.red(`Error: ${e}`)),t!=null&&t.length&&(console.log(`
Suggestions:`),t.forEach(n=>{console.log(u.cyan(`- ${n}`))}))}printUsageInstructions(e){console.log(`
You can now import the component from:`),console.log(u.cyan(`import { ${e.name} } from "@/components/ui/${e.name.toLowerCase()}"`)),Object.keys(e.files).length>1&&(console.log(`
This component includes:`),Object.entries(e.files).forEach(([t,n])=>{console.log(u.cyan(`- ${n.path}`))}))}printInitInstructions(){console.log(`
Next steps:`),console.log("1. Add components using:",u.cyan("npx animation-ui add <component>")),console.log(`2. Start using animations in your project!
`)}};import k from"os";import V from"path";import _ from"fs-extra";import{v4 as Y}from"uuid";var F=class o{constructor(){this.enabled=process.env.DISABLE_TELEMETRY!=="true",this.userId=this.getUserId()}static getInstance(){return o.instance||(o.instance=new o),o.instance}async trackEvent(e,t){if(!this.enabled)return;let n=3,r=0;for(;r<n;)try{let i={name:e,properties:{...t,os:k.platform(),nodeVersion:process.version,timestamp:new Date().toISOString(),userId:this.userId,retryCount:r}};console.debug("Telemetry event:",i);break}catch(i){r++,r===n&&console.error("Failed to send telemetry after retries:",i),await new Promise(s=>setTimeout(s,Math.pow(2,r)*100))}}getUserId(){let e=V.join(k.homedir(),".animation-ui","config.json");try{return _.readJsonSync(e).userId}catch{let t=Y();return _.outputJsonSync(e,{userId:t}),t}}};var N=class{constructor(){this.componentService=P.getInstance();this.dependencyService=h.getInstance();this.logger=new y}async execute(e){var r;let t=z(),n=F.getInstance();try{await n.trackEvent("add_command_start"),t.start("Loading available components..."),e=await this.getComponentName(e),t.succeed(),t.start(`Fetching ${e} component...`);let i=await this.componentService.getComponent(e);t.succeed(),(r=i.dependencies)!=null&&r.length&&(t.start("Installing dependencies..."),await this.dependencyService.installDependencies(i.dependencies),t.succeed()),t.start("Installing component files..."),await this.componentService.installComponent(i),t.succeed(H.green(`Successfully added ${i.name}`)),await n.trackEvent("add_command_success",{component:e}),this.logger.printUsageInstructions(i)}catch(i){t.fail(),await n.trackEvent("add_command_error",{error:i instanceof Error?i.message:"Unknown error"}),i instanceof a?this.logger.error(i.message,i.suggestions):this.logger.error(i instanceof Error?i.message:"Unknown error"),process.exit(1)}}async getComponentName(e){if(e)return e.toLowerCase();let t=await this.componentService.getAvailableComponents(),n=await J({type:"select",name:"component",message:"Select a component to add",choices:t.map(r=>({title:r.name,value:r.name.toLowerCase(),description:r.description}))});if(!n.component)throw new Error("No component selected");return n.component}};import B from"ora";import g from"fs-extra";import I from"path";var O=class{constructor(){this.logger=new y;this.dependencyService=h.getInstance()}async execute(){let e=B("Initializing animation-ui...").start();try{await this.validateEnvironment(),await this.createProjectStructure(),await this.createConfigFiles(),await this.installDependencies(),e.succeed("Successfully initialized animation-ui"),this.logger.printInitInstructions()}catch(t){e.fail(),t instanceof a?this.logger.error(t.message,t.suggestions):this.logger.error(t instanceof Error?t.message:"Unknown error"),process.exit(1)}}async validateEnvironment(){if(!await g.pathExists(I.resolve(p.CONFIG_FILES.PACKAGE_JSON)))throw new a("No package.json found","INVALID_ENV",["Run `npm init` or `yarn init` first"]);if(!await g.pathExists("node_modules"))throw new a("node_modules not found","INVALID_ENV",["Run `npm install` or `yarn install` first"])}async createProjectStructure(){let e=I.resolve(p.COMPONENTS_DIR),t=I.resolve(p.UTILS_DIR);await g.ensureDir(e),await g.ensureDir(t)}async createConfigFiles(){await this.createTailwindConfig(),await this.createUtilsFile()}async createTailwindConfig(){let e=I.resolve(p.CONFIG_FILES.TAILWIND);if(await g.pathExists(e))return;await g.writeFile(e,`module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {
      keyframes: {
        slideUpAndFade: {
          from: { opacity: '0', transform: 'translateY(2px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
        slideDownAndFade: {
          from: { opacity: '0', transform: 'translateY(-2px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
      },
      animation: {
        slideUpAndFade: 'slideUpAndFade 0.4s cubic-bezier(0.16, 1, 0.3, 1)',
        slideDownAndFade: 'slideDownAndFade 0.4s cubic-bezier(0.16, 1, 0.3, 1)',
      },
    },
  },
  plugins: [],
}`)}async createUtilsFile(){let e=I.resolve(p.UTILS_DIR,"cn.ts");if(await g.pathExists(e))return;await g.writeFile(e,`import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}`)}async installDependencies(){let e=["framer-motion","clsx","tailwind-merge"],t=["tailwindcss","autoprefixer","postcss"];await this.dependencyService.installDependencies(e),await this.dependencyService.installDependencies(t)}};var R=new W;R.name("animation-ui").description("CLI for adding animation-ui components").version("0.1.0");R.command("init").description("Initialize animations in your project").option("-y, --yes","Skip confirmation prompt").action(async()=>{await new O().execute()});R.command("add").description("Add an animation component to your project").argument("[component]","The component to add").action(async o=>{await new N().execute(o)});R.parse();
