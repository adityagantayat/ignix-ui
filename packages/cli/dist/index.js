#!/usr/bin/env node
import { createRequire } from "module"; const require = createRequire(import.meta.url);
import{Command as J}from"commander";import _ from"prompts";import M from"ora";import G from"chalk";import D from"axios";import d from"path";import p from"fs-extra";var S={BASE_URL:"https://raw.githubusercontent.com/lakinmindfire/animate-ui/feature/tailwind-merge-config/packages/registry",PATHS:{REGISTRY:"/registry.json",COMPONENTS:"/components"}},c={COMPONENTS_DIR:"src/components/ui",UTILS_DIR:"src/utils",CONFIG_FILES:{TAILWIND:"tailwind.config.js",PACKAGE_JSON:"package.json"}};var I=class extends Error{constructor(t,n,i){super(t);this.code=n;this.suggestions=i;this.name="CLIError"}},P=class extends I{constructor(e){super(`Component "${e}" not found in registry`,"COMPONENT_NOT_FOUND",["Check available components with: npx animation-ui list"])}},y=class extends I{constructor(e){super(`Registry error: ${e}`,"REGISTRY_ERROR",["Try again later or report this issue"])}};var E=class o{constructor(){this.registry=null}static getInstance(){return o.instance||(o.instance=new o),o.instance}async loadRegistry(){var e;if(this.registry)return this.registry;try{let t=await D.get(`${S.BASE_URL}${S.PATHS.REGISTRY}`);if(!((e=t.data)!=null&&e.components))throw new y("Invalid registry format");return this.registry=t.data,this.registry}catch(t){throw D.isAxiosError(t)?new y(`Failed to fetch registry: ${t.message}`):t}}async getComponent(e){let t=await this.loadRegistry(),n=e.toLowerCase(),i=t.components[n];if(!i)throw new P(e);let r=await Promise.all(Object.entries(i.files).map(async([l,w])=>{let h=`${S.BASE_URL}/${w.path}`,{data:C}=await D.get(h);return[l,{...w,content:C}]}));return{...i,files:Object.fromEntries(r)}}async getAvailableComponents(){let e=await this.loadRegistry();return Object.values(e.components)}async installComponent(e){let t=d.join(process.cwd(),c.COMPONENTS_DIR),n=d.join(t,e.name.toLowerCase());await p.ensureDir(n);for(let[i,r]of Object.entries(e.files)){if(!r.content)throw new Error(`Missing content for file: ${r.path}`);if(r.type==="tailwind-config"){await this.mergeTailwindConfig(r.content);continue}let l=d.join(n,d.basename(r.path));await p.writeFile(l,r.content)}await this.updateIndexFile(t,e.name)}async mergeTailwindConfig(e){var n,i,r,l,w,h,C,b,N;let t=d.resolve(c.CONFIG_FILES.TAILWIND);if(!await p.pathExists(t))throw new Error("Tailwind config file not found. Please run `animation-ui init` first.");try{let x=await p.readFile(t,"utf-8"),v=this.parseTailwindConfig(x),$=this.parseTailwindConfig(e),j={...v,theme:{extend:{...(n=v.theme)==null?void 0:n.extend,keyframes:{...(r=(i=v.theme)==null?void 0:i.extend)==null?void 0:r.keyframes,...(w=(l=$.theme)==null?void 0:l.extend)==null?void 0:w.keyframes},animation:{...(C=(h=v.theme)==null?void 0:h.extend)==null?void 0:C.animation,...(N=(b=$.theme)==null?void 0:b.extend)==null?void 0:N.animation}}}},k=`module.exports = ${JSON.stringify(j,null,2)}`;await p.writeFile(t,k)}catch(x){throw new Error(`Failed to merge tailwind config: ${x instanceof Error?x.message:"Unknown error"}`)}}parseTailwindConfig(e){try{let t=e.replace(/module\.exports\s*=\s*/,"").trim();return JSON.parse(t.replace(/;$/,""))}catch{let n=e.replace(/module\.exports\s*=\s*/,"").replace(/;$/,"").replace(/(['"])?([a-zA-Z0-9_]+)(['"])?\s*:/g,'"$2": ').replace(/'/g,'"');return JSON.parse(n)}}async updateIndexFile(e,t){let n=d.join(e,"index.ts"),i=`export * from './${t.toLowerCase()}';
`;(await p.pathExists(n)?await p.readFile(n,"utf-8"):"").includes(i)||await p.appendFile(n,i)}};import{execSync as U}from"child_process";import{detect as L}from"@antfu/ni";async function A(o){let e=await L({programmatic:!0,cwd:o});return e==="yarn@berry"?"yarn":e==="pnpm@6"?"pnpm":e==="bun"?"bun":e??"npm"}var g=class o{static getInstance(){return o.instance||(o.instance=new o),o.instance}async installDependencies(e){if(!e.length)return;let t=await A(process.cwd()),n=this.getInstallCommand(t,e);try{U(n,{stdio:"inherit"})}catch(i){throw new Error(`Failed to install dependencies: ${i instanceof Error?i.message:"Unknown error"}`)}}getInstallCommand(e,t){let n=t.join(" ");switch(e){case"yarn":return`yarn add ${n}`;case"pnpm":return`pnpm add ${n}`;case"bun":return`bun add ${n}`;default:return`npm install ${n}`}}};import m from"chalk";var f=class{info(e){console.log(m.blue(e))}success(e){console.log(m.green(e))}error(e,t){console.error(m.red(`Error: ${e}`)),t!=null&&t.length&&(console.log(`
Suggestions:`),t.forEach(n=>{console.log(m.cyan(`- ${n}`))}))}printUsageInstructions(e){console.log(`
You can now import the component from:`),console.log(m.cyan(`import { ${e.name} } from "@/components/ui/${e.name.toLowerCase()}"`)),Object.keys(e.files).length>1&&(console.log(`
This component includes:`),Object.entries(e.files).forEach(([t,n])=>{console.log(m.cyan(`- ${n.path}`))}))}printInitInstructions(){console.log(`
Next steps:`),console.log("1. Add components using:",m.cyan("npx animation-ui add <component>")),console.log(`2. Start using animations in your project!
`)}};var T=class{constructor(){this.componentService=E.getInstance();this.dependencyService=g.getInstance();this.logger=new f}async execute(e){var n;let t=M();try{e=await this.getComponentName(e),t.start(`Fetching ${e} component...`);let i=await this.componentService.getComponent(e);(n=i.dependencies)!=null&&n.length&&(t.text="Installing dependencies...",await this.dependencyService.installDependencies(i.dependencies)),t.text="Installing component files...",await this.componentService.installComponent(i),t.succeed(G.green(`Successfully added ${i.name}`)),this.logger.printUsageInstructions(i)}catch(i){t.fail(),i instanceof Error&&this.logger.error(i.message),process.exit(1)}}async getComponentName(e){if(e)return e.toLowerCase();let t=await this.componentService.getAvailableComponents(),n=await _({type:"select",name:"component",message:"Select a component to add",choices:t.map(i=>({title:i.name,value:i.name.toLowerCase(),description:i.description}))});if(!n.component)throw new Error("No component selected");return n.component}};import Y from"ora";import u from"fs-extra";import O from"path";var R=class{constructor(){this.logger=new f;this.dependencyService=g.getInstance()}async execute(){let e=Y("Initializing animation-ui...").start();try{await this.createProjectStructure(),await this.createConfigFiles(),await this.installDependencies(),e.succeed("Successfully initialized animation-ui"),this.logger.printInitInstructions()}catch(t){e.fail(),this.logger.error(t instanceof Error?t.message:"Unknown error"),process.exit(1)}}async createProjectStructure(){let e=O.resolve(c.COMPONENTS_DIR),t=O.resolve(c.UTILS_DIR);await u.ensureDir(e),await u.ensureDir(t)}async createConfigFiles(){await this.createTailwindConfig(),await this.createUtilsFile()}async createTailwindConfig(){let e=O.resolve(c.CONFIG_FILES.TAILWIND);if(await u.pathExists(e))return;await u.writeFile(e,`module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {
      keyframes: {
        slideUpAndFade: {
          from: { opacity: '0', transform: 'translateY(2px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
        slideDownAndFade: {
          from: { opacity: '0', transform: 'translateY(-2px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
      },
      animation: {
        slideUpAndFade: 'slideUpAndFade 0.4s cubic-bezier(0.16, 1, 0.3, 1)',
        slideDownAndFade: 'slideDownAndFade 0.4s cubic-bezier(0.16, 1, 0.3, 1)',
      },
    },
  },
  plugins: [],
}`)}async createUtilsFile(){let e=O.resolve(c.UTILS_DIR,"cn.ts");if(await u.pathExists(e))return;await u.writeFile(e,`import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}`)}async installDependencies(){let e=["framer-motion","clsx","tailwind-merge"],t=["tailwindcss","autoprefixer","postcss"];await this.dependencyService.installDependencies(e),await this.dependencyService.installDependencies(t)}};var F=new J;F.name("animation-ui").description("CLI for adding animation-ui components").version("0.1.0");F.command("init").description("Initialize animations in your project").option("-y, --yes","Skip confirmation prompt").action(async()=>{await new R().execute()});F.command("add").description("Add an animation component to your project").argument("[component]","The component to add").action(async o=>{await new T().execute(o)});F.parse();
